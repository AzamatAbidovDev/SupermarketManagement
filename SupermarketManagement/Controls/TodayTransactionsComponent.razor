@inject IGetTodayTransactionsUseCase getTodayTransactionsUseCase
@inject IRecordTransactionUseCase recordTransactionUseCase

@if (transactions != null)
{
<AntList Grid="grid" DataSource="@transactions">
    <ListItem>
        <Card Style="font-size: 25px; background-color: dodgerblue" Hoverable Title="@TitleName(context.ProductName, context.Unit)">
            <Body>
                <Icon Type="minus-square" Theme="outline" Class="btn-plus-minus" Style="font-size: 40px" OnClick="() => OnMinus(context.CashierName, context.ProductID)" /> @context.SoldQty <Icon Type="plus-square" Theme="outline" Class="btn-plus-minus" Style="font-size: 40px" OnClick="() => OnPlus(context.CashierName, context.ProductID)" />
                @(context.SoldQty * context.Price) UZS
                <Divider />
                <Icon Type="delete" Theme="outline" Style="font-size: 30px; color: maroon" OnClick="() => OnDelete(context.CashierName, context.ProductID)" />
            </Body>
        </Card>
    </ListItem>
</AntList>
}

@code {

    IEnumerable<Transaction> transactions;

    public void LoadTransactions(string cashierName)
    {
        transactions = getTodayTransactionsUseCase.Execute(cashierName);

        StateHasChanged();
    }

    void OnMinus(string cashierName, int productId)
    {
        recordTransactionUseCase.OnMinusButton(cashierName, productId);
    }
    void OnPlus(string cashierName, int productId)
    {
        recordTransactionUseCase.OnPlusButton(cashierName, productId);
    }
    void OnDelete(string cashierName, int productId)
    {
        recordTransactionUseCase.OnDeleteButton(cashierName, productId);
    }

    ListGridType grid = new()
    {
        Gutter = 16,
        Xs = 1,
        Sm = 3,
        Md = 5,
        Lg = 5,
        Xl = 6,
        Xxl = 4,
    };

    string TitleName(string name, string unit)
    {
        return $"{name.ToUpper()}  {unit}";
    }
}
