@page "/editcategory/{categoryId}"
@attribute [Authorize(Policy = "AdminOnly")]

@inject NavigationManager navManager
@inject IGetCategoryByIDUseCase GetCategoryByIDUseCase
@inject IEditCategoryUseCase EditCategoryUseCase

<div class="wrapper">
    <h3 style="color: white">Edit Category</h3>
    <br />

    @if (category != null)
    {
        <EditForm Model="category" OnValidSubmit="OnValidSumit">
            <DataAnnotationsValidator /> <ValidationSummary />
            <div class="form-group">
                <label for="name" style="font-weight: 600; color: #cdcdcd">Name</label>
                <InputText id="name" @bind-Value="category.Name" class="form-control"></InputText>
            </div>
            <div class="form-group">
                <label for="description" style="font-weight: 600; color: #cdcdcd">Description</label>
                <textarea id="description" @bind="category.Description" class="form-control"></textarea>
            </div>
            <button type="submit" class="btn btn-outline-light">Save</button>
            <button type="button" class="btn btn-dark" @onclick="OnCancel">Cancel</button>
        </EditForm>
    }
</div>

@code {

    [Parameter] public string CategoryId { get; set; }
    private Category category;

    protected override void OnParametersSet()
    {
        if (int.TryParse(this.CategoryId, out int iCategoryId))
        {
            var cat = GetCategoryByIDUseCase.Execute(iCategoryId);
            this.category = new Category { CategoryID = cat.CategoryID, Name = cat.Name, Description = cat.Description };
        }
    }

    private void OnValidSumit()
    {
        EditCategoryUseCase.Execute(this.category);
        navManager.NavigateTo("/categories");
    }
    private void OnCancel()
    {
        navManager.NavigateTo("/categories");
    }
}
