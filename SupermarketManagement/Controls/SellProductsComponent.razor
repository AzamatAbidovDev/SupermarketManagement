@inject IGetProductByIDUseCase getProductByIDUseCase
@inject ISellProductUseCase sellProductUseCase

@if (productToSell != null)
{
    @if (!string.IsNullOrWhiteSpace(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
    <button type="button" @onclick="SellProduct" class="btn btn-primary">Sell</button>
}

@code {

    [Parameter] public Product SelectedProduct { get; set; }
    [Parameter] public EventCallback<Product> OnProductSold { get; set; }
    [Parameter] public string CashierName { get; set; }

    Product productToSell;
    string errorMessage;

    protected override void OnParametersSet()
    {
        if (SelectedProduct != null)
        {
            productToSell = new Product
            {
                ProductID = SelectedProduct.ProductID,
                Name = SelectedProduct.Name,
                CategoryID = SelectedProduct.CategoryID,
                Price = SelectedProduct.Price,
                Quantity = 0
            };
        }
        else productToSell = null;
    }

    void SellProduct()
    {
        productToSell.Quantity++;

        if (string.IsNullOrWhiteSpace(CashierName))
        {
            errorMessage = "The Cashier's name is missing!";
            return;
        }
        var product = getProductByIDUseCase.Execute(productToSell.ProductID);

        if (productToSell.Quantity <= 0)
            errorMessage = "The quantity has to be greater than zero!";
        else if (product.Quantity >= productToSell.Quantity)
        {
            OnProductSold.InvokeAsync(productToSell);
            errorMessage = string.Empty;
            sellProductUseCase.Execute(CashierName, productToSell.ProductID, productToSell.Quantity.Value);
        }
        else
            errorMessage = $"{product.Name} only has {product.Quantity} left. It is not enough!";
    }
}
