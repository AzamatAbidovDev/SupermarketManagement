@inject IViewCategoriesUseCase viewCategoriesUseCase
@inject IViewProductsByCategoryID viewProductsByCategoryID
@inject IGetProductByIDUseCase getProductByIDUseCase
@inject ISellProductUseCase sellProductUseCase

<div class="form-group">
    <label for="category" style="font-weight: 600; color: #cdcdcd">CATEGORY</label>
    <select multiple size="6" id="category" @bind="SelectedCategoryId" class="form-control" style="font-size: 23px">
        <option selected></option>
        @foreach (var item in categories)
        {
            <option value="@item.CategoryID">@item.Name</option>
        }
    </select>
</div>

@if (productsInCategory != null)
{
    <table class="table" style="color: white; font-size: 23px">
        <thead>
            <tr style="color: #cdcdcd; font-size: 21px">
                <th>Name</th>
                <th>Quantity</th>
                <th>Unit</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in productsInCategory)
            {
                <tr @onclick="()=>OnSelectProduct(item)"
                    style="@(item.ProductID == selectedProductId? "background-color: blue; cursor:pointer;":"cursor:pointer")"
                    @ondblclick="()=>SellProduct(item)">
                    <td>@item.Name</td>
                    <td>@item.Quantity</td>
                    <td>@item.Unit</td>
                </tr>
            }

        </tbody>

    </table>
}
@if (productToSell != null)
{
    @if (!string.IsNullOrWhiteSpace(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
    <button type="button" @onclick="()=>SellProduct(SelectedProduct)" class="btn btn-primary">Sell</button>
}

@code {

    [Parameter] public EventCallback<Product> OnProductSelected { get; set; }
    [Parameter] public Product SelectedProduct { get; set; }
    [Parameter] public EventCallback<Product> OnProductSold { get; set; }
    [Parameter] public string CashierName { get; set; }

    IEnumerable<Product> productsInCategory;
    IEnumerable<Category> categories;
    int selectedProductId;
    int selectedCategoryId;
    Product productToSell;
    string errorMessage;

    int SelectedCategoryId
    {
        get { return selectedCategoryId; }
        set
        {
            selectedCategoryId = value;
            productsInCategory = viewProductsByCategoryID.Execute(value);
            OnSelectProduct(null);
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        categories = viewCategoriesUseCase.Execute();
    }

    void OnSelectProduct(Product product)
    {
        OnProductSelected.InvokeAsync(product);
        if (product != null)
            selectedProductId = product.ProductID;
    }

    protected override void OnParametersSet()
    {
        if (SelectedProduct != null)
        {
            productToSell = new Product
            {
                ProductID = SelectedProduct.ProductID,
                Name = SelectedProduct.Name,
                CategoryID = SelectedProduct.CategoryID,
                Price = SelectedProduct.Price,
                Quantity = 0
            };
        }
        else productToSell = null;
    }

    void SellProduct(Product p)
    {
        productToSell.Quantity++;

        if (string.IsNullOrWhiteSpace(CashierName))
        {
            errorMessage = "The Cashier's name is missing!";
            return;
        }
        var product = getProductByIDUseCase.Execute(productToSell.ProductID);

        if (productToSell.Quantity <= 0)
            errorMessage = "The quantity has to be greater than zero!";
        else if (product.Quantity >= productToSell.Quantity)
        {
            OnProductSold.InvokeAsync(productToSell);
            errorMessage = string.Empty;
            sellProductUseCase.Execute(CashierName, productToSell.ProductID, productToSell.Quantity.Value);
        }
        else
            errorMessage = $"{product.Name} only has {product.Quantity} left. It is not enough!";
    }
}

