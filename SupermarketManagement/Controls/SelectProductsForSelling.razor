@inject IViewCategoriesUseCase viewCategoriesUseCase
@inject IViewProductsByCategoryID viewProductsByCategoryID
@inject IGetProductByIDUseCase getProductByIDUseCase
@inject ISellProductUseCase sellProductUseCase

<div>
    <Tabs TabPosition="TabPosition.Top" Size="@TabSize.Large" Style="color: white; font-size: 23px" @bind-ActiveKey="@activeKey" OnChange="OnTabChange">
        @foreach (var item in categories)
        {           
        <TabPane Tab="@item.Name.ToUpper()" Key="@item.CategoryID.ToString()">          
            @if (productsInCategory != null)
            {
            <Table Size="@TableSize.Middle"
                   Bordered
                   DataSource="@productsInCategory">
                <ActionColumn Class="table-size-category" Title="Name"><a @onclick="()=>OnSelectProduct(context)" @ondblclick="()=>SellProduct(context)">@context.Name</a></ActionColumn>
                <ActionColumn Class="table-size-category" Title="Quantity"><a @onclick="()=>OnSelectProduct(context)" @ondblclick="()=>SellProduct(context)">@context.Quantity</a></ActionColumn>
                <ActionColumn Class="table-size-category" Title="Unit"><a @onclick="()=>OnSelectProduct(context)" @ondblclick="()=>SellProduct(context)">@context.Unit</a></ActionColumn>
            </Table>
            }
        </TabPane>
        }
    </Tabs>
</div>

@if (productToSell != null)
{
    @if (!string.IsNullOrWhiteSpace(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
}

@code {

    [Parameter] public EventCallback<Product> OnProductSelected { get; set; }
    [Parameter] public Product SelectedProduct { get; set; }
    [Parameter] public EventCallback<Product> OnProductSold { get; set; }
    [Parameter] public string CashierName { get; set; }

    IEnumerable<Product> productsInCategory;
    IEnumerable<Category> categories;
    int selectedProductId;
    int selectedCategoryId;
    Product productToSell;
    string errorMessage;

    string activeKey { get; set; } = "1";

    void OnTabChange(string key)
    {
        SelectedCategoryId = int.Parse(key);
    }

    int SelectedCategoryId
    {
        get { return selectedCategoryId; }
        set
        {
            selectedCategoryId = value;
            productsInCategory = viewProductsByCategoryID.Execute(value);
            OnSelectProduct(null);
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        categories = viewCategoriesUseCase.Execute();
    }

    void OnSelectProduct(Product product)
    {
        OnProductSelected.InvokeAsync(product);
        if (product != null)
            selectedProductId = product.ProductID;
    }

    protected override void OnParametersSet()
    {
        if (SelectedProduct != null)
        {
            productToSell = new Product
            {
                ProductID = SelectedProduct.ProductID,
                Name = SelectedProduct.Name,
                CategoryID = SelectedProduct.CategoryID,
                Price = SelectedProduct.Price,
                Quantity = 0
            };
        }
        else productToSell = null;
    }

    void SellProduct(Product p)
    {
        productToSell.Quantity++;

        if (string.IsNullOrWhiteSpace(CashierName))
        {
            errorMessage = "The Cashier's name is missing!";
            return;
        }
        var product = getProductByIDUseCase.Execute(productToSell.ProductID);

        if (productToSell.Quantity <= 0)
            errorMessage = "The quantity has to be greater than zero!";
        else if (product.Quantity >= productToSell.Quantity)
        {
            OnProductSold.InvokeAsync(productToSell);
            errorMessage = string.Empty;
            sellProductUseCase.Execute(CashierName, productToSell.ProductID, productToSell.Quantity.Value);
        }
        else
            errorMessage = $"{product.Name} only has {product.Quantity} left. It is not enough!";
    }

}

